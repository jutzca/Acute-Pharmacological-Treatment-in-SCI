(i.e., start and end date, frequency) were abstracted directly from medical records. However, drug indication was not recorded. The drug data has not been published."
), # close box
fluidRow(
valueBox(prettyNum(1243, big.mark=" ", scientific=FALSE), "Patients", icon = icon("user-edit"), width = 3, color = "purple"),
valueBox(prettyNum(575, big.mark=" ", scientific=FALSE), "Unique drugs to treat secondary complications", icon = icon("pills"), width = 3,  color = "purple"),
#valueBox(prettyNum(10, big.mark="", scientific=FALSE), "Prophylaxis", icon = icon("heartbeat"), width = 3,  color = "purple"),
valueBox("6", "North American clinical sites", icon = icon("clinic-medical"), width = 3,  color = "purple"),
valueBox("2007-2010", "Running time", icon = icon("calendar-alt"), width = 3,  color = "purple")#,
#valueBox(404, "Something", icon = icon("project-diagram"), width = 3)
)
), # close fluid row
fluidRow(
box(#title = "Explore The Data",
width = 8,
heigth = "500px",
solidHeader = TRUE,
h4('Website'),
tags$a("ADDEP SCIRehab Data Source", href="https://www.icpsr.umich.edu/web/ADDEP/studies/36724",
target="_blank",
icon("external-link")),
h4("References"),
tags$ul(
tags$li(a('Whiteneck et al, 2009; ', href = 'https://pubmed.ncbi.nlm.nih.gov/19810627/', target="_blank"), "New approach to study the contents and outcomes of spinal cord injury rehabilitation: the SCIRehab Project. J Spinal Cord Med."),
tags$li(a('Whiteneck et al, 2011', href = 'https://pubmed.ncbi.nlm.nih.gov/21675353/', target="_blank"), "Inpatient treatment time across disciplines in spinal cord injury rehabilitation. J Spinal Cord Med")
) # close tags
) # close box
) # close fluid row
),
tabItem(tabName = "cohort_scirehab",
h3("Description of SCIRehab Study Cohort"),
fluidRow(
box(width = 12,
div(style="display:inline-block;width:100%;text-align:center;",
radioGroupButtons(
inputId = "var1",
label = "Patient characteristics:",
selected = "sex",
status = "success",
#justified = T, #if true, all boxes have the same length
individual = T, #if false, then the boxes are connected
choiceNames = c("Sex", "Age", "Injury Severity", "Injury Level", "Tetra- and paraplegia", "Etiology"),
choiceValues = c("sex", "age", "baseline.ais", "nli", "plegia", "etiology")
) #close box bracket
), #close divstyle
div(plotlyOutput("bar.plot.baseline.characteristic.scirehab", width = "50%",
height = "600px",
inline = FALSE), align='center')
) #close box bracket
) #close fluid row
), #close tabitem
tabItem(tabName = "abbreviations",
titlePanel(strong("Dictionary of abbreviations")),
fluidRow(
column(width = 6,
box(width = NULL, status = "primary",
h4(strong('General')),
p(strong('SCI'), 'spinal cord injury'),
p(strong(a('ASIA', href ="https://asia-spinalinjury.org/", target="_blank")), 'american spinal injury association'),
p(strong(a('EMSCI', href ="https://www.emsci.org/", target="_blank")), 'european multicenter study about spinal cord injury'),
p(strong('PBE'), 'practice-based evidence')
),
box(width = NULL, status = "primary",
h4(strong('Functional outcomes')),
p(strong(a('WISCI', href = "http://www.spinalcordcenter.org/research/wisci_guide.pdf", target="_blank")), 'walking index for spinal cord injury'),
p(strong(a('test_6min', href = "https://www.emsci.org/index.php/project/the-assessments/functional-test", target="_blank")), '6 minutes walking test'),
p(strong(a('test_10m', href = "https://www.emsci.org/index.php/project/the-assessments/functional-test", target="_blank")), '10 meters walking test'),
p(strong(a('TUG', href = "https://www.emsci.org/index.php/project/the-assessments/functional-test", target="_blank")), 'timed up and go test'),
p(strong(a('SCIM2', href = "https://www.emsci.org/index.php/project/the-assessments/independence", target="_blank")), 'spinal cord independence measure type 2'),
p(strong(a('SCIM3', href = "https://www.emsci.org/index.php/project/the-assessments/independence", target="_blank")), 'spinal cord independence measure type 3'),
p(strong('benzel'), 'modified benzel classification')
)
), # end column
column(width = 6,
box(width = NULL, status = "primary",
h4(strong(a('Neurological outcomes', href ="https://asia-spinalinjury.org/wp-content/uploads/2016/02/International_Stds_Diagram_Worksheet.pdf", target="_blank"))),
p(strong(a('AIS', href ='https://www.icf-casestudies.org/introduction/spinal-cord-injury-sci/american-spinal-injury-association-asia-impairment-scale#:~:text=The%20American%20Spinal%20Injury%20Association,both%20sides%20of%20the%20body', target="_blank")), 'ASIA impairment scale'),
p(strong('UEMS'), 'upper extremity motor score'),
p(strong('RUEMS'), 'right upper extremity motor score'),
p(strong('LUEMS'), 'left upper extremity motor score'),
p(strong('LEMS'), 'lower extremity motor score'),
p(strong('RLEMS'), 'right lower extremity motor score'),
p(strong('LLEMS'), 'left lower extremity motor score'),
p(strong('RMS'), 'right motor score'),
p(strong('LMS'), 'left motor score'),
p(strong('TMS'), 'total motor score'),
p(strong('RPP'), 'right pin prick'),
p(strong('LPP'), 'left pin prick'),
p(strong('TPP'), 'total pin prick'),
p(strong('RLT'), 'right light touch'),
p(strong('LLT'), 'left light touch'),
p(strong('TLT'), 'total light touch')
)
) # end column
) # end fluidRow
) # end tabItem
) # close tabitems
) # close dashboard body
) # close ui
server <- function(input, output, session) {
output$cohort <- renderMenu({
sidebarMenu(
menuItem("Cohort description", icon = icon("users"))
)
})
output$distPlot <- renderPlot({
hist(rnorm(input$obs))})
# Create Data Alert
# createAlert(session = session,
#             anchorId = "dataAlert",
#             #alertId="a1",
#             title = paste(icon("warning"),"Data Notification"),
#             content="To protect the privacy of all patients, this application only uses aggregate, anonymized data (i.e., no individual person is identifiable).
#             For further information, see our <a href='#' onclick=\"openTab('data')\">data description section</a>.",
#             style = "warning")
#
# #------- Plot GM1----------
#   output$gm1 <- renderImage({
#     return(list(src = "/Users/jutzca/Documents/Github/Acute-Pharmacological-Treatment-in-SCI/shinyapp/acute_pharmacological_management_sci/www/gm1.png",
#                 type = "image/png",alt = "gm1", width = "200ptx"))
#   }, deleteFile = FALSE) #where the src is wherever you have the picture
#
#------- Plot baseline characteristics of Sygen patients ----------
output$bar.plot.baseline.characteristic.sygen <- renderPlotly({
if (input$var == "sex")  {
width = c(0.8, 0.8, 0.8)
sygen_baseline$Sex=factor(sygen_baseline$Sex, levels = c("Unknown", "Male", "Female" ))
baseline.sex <- sygen_baseline%>%
dplyr::count(Sex)%>%
dplyr::mutate(frequency=sprintf("%0.1f", n/797*100))%>%
as.data.frame()%>%
plotly::plot_ly(y = ~Sex,
x =  ~as.numeric(frequency))%>%
plotly::add_bars(
marker = list(color = 'rgb(96,92,168)'),
width = ~width,
text = ~paste("Sex:", Sex,
'</br></br>', "N:", n,
'</br>', "Frequency:", frequency, '%'),
#text = ~n,
hoverinfo = "text")%>%
layout(title = '', font=list(size = 12)) %>%
layout(xaxis = list(title = 'Proportion [%]')) %>%
layout( xaxis = list(titlefont = list(size = 16), tickfont = list(size = 14)),
yaxis = list(titlefont = list(size = 16), tickfont = list(size = 14)) )
baseline.sex}
else if (input$var == "age")  {
width.age.group = c(0.8, 0.8, 0.8, 0.8, 0.8)
sygen_baseline$agegroup=factor(sygen_baseline$agegroup, levels = c("Unknown", "61+ yrs", "41-60 yrs", "21-40 yrs", "0-20 yrs" ))
baseline.age.grp<- sygen_baseline%>%
dplyr::count(agegroup)%>%
dplyr::mutate(frequency=sprintf("%0.1f", n/797*100))%>%
as.data.frame()%>%
plotly::plot_ly(y = ~ agegroup,
x =  ~as.numeric(frequency))%>%
plotly::add_bars(
marker = list(color = 'rgb(96,92,168)'),
width = ~width.age.group,
text = ~paste("Age Group:", agegroup,
'</br></br>', "N:", n,
'</br>', "Frequency:", frequency, '%'),
hoverinfo = "text")%>%
plotly::layout(xaxis = list(title = "Proportion [%]"),
yaxis = list(title = ""))
baseline.age.grp}
else if (input$var == "baseline.ais")  {
width.ais = c(0.8, 0.8, 0.8, 0.8, 0.8)
sygen_baseline$AIS=factor(sygen_baseline$AIS, levels = c('Unknown', "AIS D", 'AIS C', "AIS B", "AIS A"))
baseline.ais <- sygen_baseline%>%
dplyr::count(AIS)%>%
dplyr::mutate(frequency=sprintf("%0.1f", n/797*100))%>%
as.data.frame()%>%
plotly::plot_ly(y = ~AIS,
x =  ~as.numeric(frequency))%>%
plotly::add_bars(
marker = list(color = 'rgb(96,92,168)'),
width = ~width.ais,
text = ~paste("Injury Severity:", AIS,
'</br></br>', "N:", n,
'</br>', "Frequency:", frequency, '%'),
hoverinfo = "text")%>%
plotly::layout(xaxis = list(title = "Proportion [%]"),
yaxis = list(title = ""))
baseline.ais}
else if (input$var == "nli")  {width.nli = c(0.8, 0.8, 0.8)
sygen_baseline$NLI=factor(sygen_baseline$NLI, levels = c('Unknown','Thoracic', "Cervical"))
baseline.nli <- sygen_baseline%>%
dplyr::count(NLI)%>%
dplyr::mutate(frequency=sprintf("%0.1f", n/797*100))%>%
as.data.frame()%>%
plotly::plot_ly(y = ~NLI,
x =  ~as.numeric(frequency))%>%
plotly::add_bars(
marker = list(color = 'rgb(96,92,168)'),
width = ~width.nli,
text = ~paste("Injury Level:", NLI,
'</br></br>', "N:", n,
'</br>', "Frequency:", frequency, '%'),
hoverinfo = "text")%>%
plotly::layout(xaxis = list(title = "Proportion [%]"),
yaxis = list(title = ""))
baseline.nli}
else if (input$var == "plegia")  {
width.plegia = c(0.8, 0.8,0.8)
sygen_baseline$Plegia=factor(sygen_baseline$Plegia, levels = c("Unknown",'Paraplegia','Tetraplegia'))
baseline.plegia <- sygen_baseline%>%
dplyr::count(Plegia)%>%
dplyr::mutate(frequency=sprintf("%0.1f", n/797*100))%>%
as.data.frame()%>%
plotly::plot_ly(y = ~Plegia,
x =  ~as.numeric(frequency))%>%
plotly::add_bars(
marker = list(color = 'rgb(96,92,168)'),
width = ~width.plegia,
text = ~paste("Para- and Tetraplegia:", Plegia,
'</br></br>', "N:", n,
'</br>', "Frequency:", frequency, '%'),
hoverinfo = "text")%>%
plotly::layout(xaxis = list(title = "Proportion [%]"),
yaxis = list(title = ""))
baseline.plegia}
else if (input$var == "etiology")  {
width.cause = c(0.8, 0.8, 0.8, 0.8, 0.8,0.8, 0.8, 0.8, 0.8, 0.8)
sygen_baseline$Cause=factor(sygen_baseline$Cause, levels = c('Unknown','Others', "Water related", "Pedestrian", "Other sports", "Motorcycle", "Gun shot wound", "Fall", "Blunt trauma", "Automobile" ))
baseline.cause<- sygen_baseline%>%
dplyr::count(Cause)%>%
dplyr::mutate(frequency=sprintf("%0.1f", n/793*100))%>%
as.data.frame()%>%
plotly::plot_ly(y = ~Cause,
x =  ~as.numeric(frequency))%>%
plotly::add_bars(
marker = list(color = 'rgb(96,92,168)'),
width = ~width.cause,
text = ~paste("Etiology:", Cause,
'</br></br>', "N:", n,
'</br>', "Frequency:", frequency, '%'),
hoverinfo = "text")%>%
plotly::layout(xaxis = list(title = "Proportion [%]"),
yaxis = list(title = ""))
baseline.cause}
})
#------- Plot baseline characteristics of SCIRehab patients ----------
output$bar.plot.baseline.characteristic.scirehab <- renderPlotly({
if (input$var1 == "sex")  {
width = c(0.8, 0.8)
baseline.sex <- scirehab_baseline%>%
dplyr::count(Sex)%>%
dplyr::mutate(frequency=sprintf("%0.1f", n/1243*100))%>%
as.data.frame()%>%
plotly::plot_ly(y = ~Sex,
x =  ~as.numeric(frequency))%>%
plotly::add_bars(
marker = list(color = 'rgb(96,92,168)'),
width = ~width,
text = ~paste("Sex:", Sex,
'</br></br>', "N:", n,
'</br>', "Percentage:", frequency, '%'),
#text = ~n,
hoverinfo = "text")%>%
layout(title = '', font=list(size = 12)) %>%
layout(xaxis = list(title = 'Percentage [%]')) %>%
layout( xaxis = list(titlefont = list(size = 16), tickfont = list(size = 14)),
yaxis = list(titlefont = list(size = 16), tickfont = list(size = 14)) )
baseline.sex}
else if (input$var1 == "age")  {
width.age.group = c(0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8)
scirehab_baseline$Age=factor(scirehab_baseline$Age, levels = c("80+ yrs", "70-79 yrs", "60-69 yrs", "50-59 yrs", "40-49 yrs", "30-39 yrs", "20-29 yrs", "0-19 yrs" ))
baseline.age<- scirehab_baseline%>%
dplyr::count(Age)%>%
dplyr::mutate(frequency=sprintf("%0.1f", n/1243*100))%>%
as.data.frame()%>%
plotly::plot_ly(y = ~ Age,
x =  ~as.numeric(frequency))%>%
plotly::add_bars(
marker = list(color = 'rgb(96,92,168)'),
width = ~width.age.group,
text = ~paste("Age Group:", Age,
'</br></br>', "N:", n,
'</br>', "Percentage:", frequency, '%'),
hoverinfo = "text")%>%
plotly::layout(xaxis = list(title = "Percentage [%]"),
yaxis = list(title = ""))
baseline.age}
else if (input$var1 == "baseline.ais")  {
width.ais = c(0.8, 0.8, 0.8, 0.8)
scirehab_baseline$AIS=factor(scirehab_baseline$AIS, levels = c("AIS D", "AIS C", "AIS B", "AIS A"))
baseline.ais <- scirehab_baseline%>%
dplyr::count(AIS)%>%
dplyr::mutate(frequency=sprintf("%0.1f", n/1243*100))%>%
as.data.frame()%>%
plotly::plot_ly(y = ~AIS,
x =  ~as.numeric(frequency))%>%
plotly::add_bars(
marker = list(color = 'rgb(96,92,168)'),
width = ~width.ais,
text = ~paste("Injury Severity:", AIS,
'</br></br>', "N:", n,
'</br>', "Percentage:", frequency, '%'),
hoverinfo = "text")%>%
plotly::layout(xaxis = list(title = "Percentage [%]"),
yaxis = list(title = ""))
baseline.ais}
else if (input$var1 == "nli")  {
width.nli = c(0.8, 0.8, 0.8)
scirehab_baseline$NLI=factor(scirehab_baseline$NLI, levels = c("Lumbar", 'Thoracic', "Cervical"))
baseline.nli <- scirehab_baseline%>%
dplyr::count(NLI)%>%
dplyr::mutate(frequency=sprintf("%0.1f", n/1243*100))%>%
as.data.frame()%>%
plotly::plot_ly(y = ~NLI,
x =  ~as.numeric(frequency))%>%
plotly::add_bars(
marker = list(color = 'rgb(96,92,168)'),
width = ~width.nli,
text = ~paste("Injury Level:", NLI,
'</br></br>', "N:", n,
'</br>', "Percentage:", frequency, '%'),
hoverinfo = "text")%>%
plotly::layout(xaxis = list(title = "Percentage [%]"),
yaxis = list(title = ""))
baseline.nli}
else if (input$var1 == "plegia")  {
width.plegia = c(0.8, 0.8)
scirehab_baseline$Plegia=factor(scirehab_baseline$Plegia, levels = c('Paraplegia', "Tetraplegia"))
baseline.plegia <- scirehab_baseline%>%
dplyr::count(Plegia)%>%
dplyr::mutate(frequency=sprintf("%0.1f", n/1243*100))%>%
as.data.frame()%>%
plotly::plot_ly(y = ~Plegia,
x =  ~as.numeric(frequency))%>%
plotly::add_bars(
marker = list(color = 'rgb(96,92,168)'),
width = ~width.plegia,
text = ~paste("Para- and Tetraplegia:", Plegia,
'</br></br>', "N:", n,
'</br>', "Percentage:", frequency, '%'),
hoverinfo = "text")%>%
plotly::layout(xaxis = list(title = "Percentage [%]"),
yaxis = list(title = ""))
baseline.plegia}
else if (input$var1 == "etiology")  {
width.cause = c(0.8, 0.8, 0.8, 0.8,0.8, 0.8, 0.8, 0.8, 0.8)
scirehab_baseline$Cause=factor(scirehab_baseline$Cause, levels = c("Other", "Water related","Person-to-person contact", "Pedestrian", "Sports", "Motorcycle", "Gun shot", "Fall", "Automobile" ))
baseline.cause<- scirehab_baseline%>%
dplyr::count(Cause)%>%
dplyr::mutate(frequency=sprintf("%0.1f", n/1243*100))%>%
as.data.frame()%>%
plotly::plot_ly(y = ~Cause,
x =  ~as.numeric(frequency))%>%
plotly::add_bars(
marker = list(color = 'rgb(96,92,168)'),
width = ~width.cause,
text = ~paste("Etiology:", Cause,
'</br></br>', "N:", n,
'</br>', "Percentage:", frequency, '%'),
hoverinfo = "text")%>%
plotly::layout(xaxis = list(title = "Percentage [%]"),
yaxis = list(title = ""))
baseline.cause}
})
# Overview figure if pharmacological management (overall)
output$plot_pharmacol_management_sygen <- renderPlotly({
if (input$pharmacol_management_sygen == "full_cohort_sygen"){ #full cohort selected
# input_day <- input$day_pharmacol_management_sygen[[1]]
# print(input_day)
plot <- fct_acute_pharmacol_management_sygen(input_day)
plot}
})
# Overview figure if pharmacological management (overall)
output$plot_pharmacol_management_indication_sygen <- renderPlotly({
if (input$pharmacol_management_sygen == "full_cohort_sygen"){ #full cohort selected
# input_day <- input$day_pharmacol_management_sygen[[1]]
# print(input_day)
plot <- fct_acute_pharmacol_management_sygen(input_day)
plot}
})
output$table <- renderDataTable({
if (input$pharmacol_management_sygen == "full_cohort_sygen"){
table.for.crosstalk <- acute_pharmacol_management.data.sygen %>%
dplyr::filter(dose != 0)%>%
#dplyr::select(-"indication")%>%
dplyr::group_by(day_x, generic_name,indication)%>%
ungroup()%>%
dplyr::select(generic_name, day, indication)%>%
dplyr::distinct(generic_name,day,indication)%>%
dplyr::rename(Day=day)%>%
dplyr::rename(Indication=indication)%>%
dplyr::rename(`Drug name`=generic_name)%>%
datatable(rownames = FALSE)
}
})
output$plot_pharmacol_management_by_indication_sygen<-renderPlotly({
if (input$pharmacol_management_sygen == "full_cohort_sygen"){
# if (input$select_indication_pharmacol_management_sygen == "Pain")  {
fct_acute_pharmacol_management_by_indication_sygen<- function(day){
nr.of.patients.per.drug.per.day.per.indication <- acute_pharmacol_management.data.sygen %>%
filter(indication == input$select_indication_pharmacol_management_sygen)%>%
dplyr::filter(dose != 0)%>%
dplyr::group_by(day, generic_name, indication) %>%
dplyr::select(generic_name, day,indication)%>%
ungroup()%>%
dplyr::count(day,indication)%>%
dplyr::group_by(day,indication)
nr.of.patients.per.drug.per.day.per.indication
acute_pharmacol_management.by.indication.plot<-nr.of.patients.per.drug.per.day.per.indication%>%
highlight_key(~day)%>%
plotly::plot_ly(y = ~n,
x =  ~day)%>%
plotly::add_bars(
marker = list(color = 'rgb(96,92,168)'),
width = ~0.9,
text = ~paste("Days post injury:", day,
'</br></br>', "Number of drugs:", n
),
hoverinfo = "text")%>%
plotly::layout(xaxis = list(title = "Days post injury"),
yaxis = list(title = "Numbers of unique drugs"))%>%
highlight(on = "plotly_hover", off = "plotly_doubleclick")
acute_pharmacol_management.by.indication.plot
return(acute_pharmacol_management.by.indication.plot)
}
plot <- fct_acute_pharmacol_management_by_indication_sygen()
plot
}
}) #close function
# Figure of drugs per patient (mean, max, min)
output$plot_pharmacol_management_ind_sygen <- renderPlotly({
if (input$pharmacol_management_sygen == "full_cohort_sygen"){ #full cohort selected
# Create color list
color_list <- c("#FFA500", "#EE6677", "#228833", "#4477AA", "#4B0082")
# Create plot
number.of.drug.perday.sygen.plot <- ggplot(acute_pharmacol_management.data.ind.sygen, aes(x=day, y=mean, color = ais1))+
geom_line(aes(x=day, y=mean, color=ais1), size=1)+
geom_ribbon(aes(ymin=min,ymax=max,fill=ais1),color="grey",alpha=0.4) +  theme_bw(base_size = 12, base_family = "Times") + xlim(1,60) +
scale_fill_manual(values=color_list) + scale_color_manual(values=color_list) +
facet_wrap(.~ais1, ncol = 1)+
theme(legend.position="none", axis.text = element_text(color = 'black'),
axis.title = element_text(color = 'black'),
strip.text = element_text(color = 'black'))+
xlab('Days post injury')+ylab("Number of unique drugs, mean [min -max]")
number.of.drug.perday.sygen.plot
ggplotly(number.of.drug.perday.sygen.plot, tooltip=c("x", "y"), height = 600, width=800)
}
})
#full_cohort_sygen', 'sbgrps_sygen'
#------- other -----------
shinyjs::onclick("menu",
shinyjs::toggle(id = "sideFooter", anim = F))
shiny:::flushReact()
}
# Run the application
shinyApp(ui = ui, server = server)
# Create plot
number.of.drug.perday.sygen.plot <- ggplot(acute_pharmacol_management.data.ind.sygen, aes(x=day, y=mean, color = ais1))+
geom_line(aes(x=day, y=mean, color=ais1), size=1)+
geom_ribbon(aes(ymin=min,ymax=max,fill=ais1),color="grey",alpha=0.4) +  theme_bw(base_size = 12, base_family = "Courier New") + xlim(1,60) +
scale_fill_manual(values=color_list) + scale_color_manual(values=color_list) +
facet_wrap(.~ais1, ncol = 1)+
theme(legend.position="none", axis.text = element_text(color = 'black'),
axis.title = element_text(color = 'black'),
strip.text = element_text(color = 'black'))+
xlab('Days post injury')+ylab("Number of unique drugs, mean [min -max]")
number.of.drug.perday.sygen.plot
ggplotly(number.of.drug.perday.sygen.plot, tooltip=c("x", "y"), height = 600, width=800)
# Create color list
color_list <- c("#FFA500", "#EE6677", "#228833", "#4477AA", "#4B0082")
# Create plot
number.of.drug.perday.sygen.plot <- ggplot(acute_pharmacol_management.data.ind.sygen, aes(x=day, y=mean, color = ais1))+
geom_line(aes(x=day, y=mean, color=ais1), size=1)+
geom_ribbon(aes(ymin=min,ymax=max,fill=ais1),color="grey",alpha=0.4) +  theme_bw(base_size = 12, base_family = "Courier New") + xlim(1,60) +
scale_fill_manual(values=color_list) + scale_color_manual(values=color_list) +
facet_wrap(.~ais1, ncol = 1)+
theme(legend.position="none", axis.text = element_text(color = 'black'),
axis.title = element_text(color = 'black'),
strip.text = element_text(color = 'black'))+
xlab('Days post injury')+ylab("Number of unique drugs, mean [min -max]")
number.of.drug.perday.sygen.plot
ggplotly(number.of.drug.perday.sygen.plot, tooltip=c("x", "y"), height = 600, width=800)
# Create plot
number.of.drug.perday.sygen.plot <- ggplot(acute_pharmacol_management.data.ind.sygen, aes(x=day, y=mean, color = ais1))+
geom_line(aes(x=day, y=mean, color=ais1), size=1)+
geom_ribbon(aes(ymin=min,ymax=max,fill=ais1),color="grey",alpha=0.4) +  theme_bw(base_size = 12, base_family = "Corbel") + xlim(1,60) +
scale_fill_manual(values=color_list) + scale_color_manual(values=color_list) +
facet_wrap(.~ais1, ncol = 1)+
theme(legend.position="none", axis.text = element_text(color = 'black'),
axis.title = element_text(color = 'black'),
strip.text = element_text(color = 'black'))+
xlab('Days post injury')+ylab("Number of unique drugs, mean [min -max]")
number.of.drug.perday.sygen.plot
ggplotly(number.of.drug.perday.sygen.plot, tooltip=c("x", "y"), height = 600, width=800)
# Create plot
number.of.drug.perday.sygen.plot <- ggplot(acute_pharmacol_management.data.ind.sygen, aes(x=day, y=mean, color = ais1))+
geom_line(aes(x=day, y=mean, color=ais1), size=1)+
geom_ribbon(aes(ymin=min,ymax=max,fill=ais1),color="grey",alpha=0.4) +  theme_bw(base_size = 12, base_family = "Arial") + xlim(1,60) +
scale_fill_manual(values=color_list) + scale_color_manual(values=color_list) +
facet_wrap(.~ais1, ncol = 1)+
theme(legend.position="none", axis.text = element_text(color = 'black'),
axis.title = element_text(color = 'black'),
strip.text = element_text(color = 'black'))+
xlab('Days post injury')+ylab("Number of unique drugs, mean [min -max]")
number.of.drug.perday.sygen.plot
ggplotly(number.of.drug.perday.sygen.plot, tooltip=c("x", "y"), height = 600, width=800)
# Create plot
number.of.drug.perday.sygen.plot <- ggplot(acute_pharmacol_management.data.ind.sygen, aes(x=day, y=mean, color = ais1))+
geom_line(aes(x=day, y=mean, color=ais1), size=1)+
geom_ribbon(aes(ymin=min,ymax=max,fill=ais1),color="grey",alpha=0.4) +  theme_bw(base_size = 12, base_family = "Arial") + xlim(1,60) +
scale_fill_manual(values=color_list) + scale_color_manual(values=color_list) +
facet_wrap(.~ais1, ncol = 1)+
theme(legend.position="none", axis.text = element_text(color = 'black'),
axis.title = element_text(color = 'black'),
strip.text = element_text(color = 'black'))+
xlab('Days post injury')+ylab("Number of unique drugs, mean [min -max]\n")
number.of.drug.perday.sygen.plot
