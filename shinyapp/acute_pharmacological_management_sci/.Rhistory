nr.of.patients.per.drug.per.day <- information.on.medication.long2.extended %>%
dplyr::filter(dose != 0)%>%
dplyr::select(-"indication")%>%
dplyr::group_by(day, generic_name) %>%
distinct()%>%
dplyr::mutate(n.source = n()) %>%
dplyr::select(-"NEW_ID")%>%
distinct()%>%
dplyr::mutate_if(is.numeric, ~1 * (. != 0)) %>%
dplyr::mutate_if(is.numeric, ~replace_na(., 0))%>%
dplyr::count(day)
nr.of.patients.per.drug.per.day
nr.of.patients.per.drug.per.day$day <-as.numeric(as.factor(nr.of.patients.per.drug.per.day$day))
plot_ly(nr.of.patients.per.drug.per.day, x = ~day, y = ~n, type = 'bar')
nr.of.patients.per.drug.per.day.X7 <- nr.of.patients.per.drug.per.day%>% subset(day=="X60")%>%
as.data.frame()%>%
select(-c("day", "dose"))
nr.of.patients.per.drug.per.day
nr.of.patients.per.drug.per.day.X7 <- nr.of.patients.per.drug.per.day%>% subset(day=="X60")%>%
as.data.frame()%>%
select(-c("day"))
# Create source
source <- network_data %>% subset(day=="X60" & value >10 )%>%
distinct(Source) %>%
dplyr::rename(label = Source)
head(source)
# Create target
target <- network_data %>%subset(day=="X60" & value >20 )%>%
distinct(Target) %>%
dplyr::rename(label = Target)
nr.of.patients.per.drug.per.day
nr.of.patients.per.drug.per.day.X7
network_data
# Create source
source <- network_data %>% subset(day=="X7" & value >20 )%>%
distinct(Source) %>%
dplyr::rename(label = Source)
head(source)
# Create target
target <- network_data %>%subset(day=="X7" & value >20 )%>%
distinct(Target) %>%
dplyr::rename(label = Target)
names(target)
target
# To create a single dataframe with a column with the unique locations we need to use a full join
nodes <- full_join(source, target, by = "label")
names(nodes)
# To have unique IDs for each city, we add an “id” column
nodes <- nodes %>% rowid_to_column("id")
nodes
nodes2 <- merge(nodes, nr.of.patients.per.drug.per.day.X7, by.x = "label", by.y = "generic_name")
nodes2
# 2. Edge list
edge.data <- network_data %>%  subset(day=="X60" & value >20 )%>%
group_by(Source, Target) %>%
dplyr::summarise(weight = value) %>%
ungroup()
nodes
# To have unique IDs for each city, we add an “id” column
nodes <- nodes %>% rowid_to_column("id")
source
# Create target
target <- network_data %>%subset(day=="X7" & value >20 )%>%
distinct(Target) %>%
dplyr::rename(label = Target)
target
# To create a single dataframe with a column with the unique locations we need to use a full join
nodes <- full_join(source, target, by = "label")
names(nodes)
nodes
nodes2 <- merge(nodes, nr.of.patients.per.drug.per.day.X7, by.x = "label", by.y = "generic_name")
nodes2
nodes2 <- merge(nodes, nr.of.patients.per.drug.per.day.X7, by.x = "label", by.y = "generic_name")
nodes2
# To have unique IDs for each city, we add an “id” column
nodes <- nodes %>% rowid_to_column("id")
nodes
nodes2 <- merge(nodes, nr.of.patients.per.drug.per.day.X7, by.x = "label", by.y = "generic_name")
nodes2
nodes
nr.of.patients.per.drug.per.day.X7
nr.of.patients.per.drug.per.day.X7 <- nr.of.patients.per.drug.per.day%>% subset(day=="X60")%>%
as.data.frame()%>%
select(-c("day"))
nr.of.patients.per.drug.per.day.X7
nr.of.patients.per.drug.per.day.X7 <- nr.of.patients.per.drug.per.day%>% subset(day=="X7")%>%
as.data.frame()%>%
select(-c("day"))
# Create source
source <- network_data %>% subset(day=="X7" & value >20 )%>%
distinct(Source) %>%
dplyr::rename(label = Source)
nr.of.patients.per.drug.per.day.X7
nr.of.patients.per.drug.per.day
nr.of.patients.per.drug.per.day.X7 <- nr.of.patients.per.drug.per.day%>% subset(day==1)%>%
as.data.frame()%>%
select(-c("day"))
nr.of.patients.per.drug.per.day.X7
nr.of.patients.per.drug.per.day.X7 <- nr.of.patients.per.drug.per.day%>% subset(day==1)%>%
as.data.frame()%>%
select(-c("day"))
# Create source
source <- network_data %>% subset(day=="X7" & value >20 )%>%
distinct(Source) %>%
dplyr::rename(label = Source)
# Create source
source <- network_data %>% subset(day=="X7" & value >20 )%>%
distinct(Source) %>%
dplyr::rename(label = Source)
head(source)
# Create target
target <- network_data %>%subset(day=="X7" & value >20 )%>%
distinct(Target) %>%
dplyr::rename(label = Target)
names(target)
# To create a single dataframe with a column with the unique locations we need to use a full join
nodes <- full_join(source, target, by = "label")
names(nodes)
# To have unique IDs for each city, we add an “id” column
nodes <- nodes %>% rowid_to_column("id")
nodes
nodes2 <- merge(nodes, nr.of.patients.per.drug.per.day.X7, by.x = "label", by.y = "generic_name")
nodes2
# 2. Edge list
edge.data <- network_data %>%  subset(day=="X7" & value >20 )%>%
group_by(Source, Target) %>%
dplyr::summarise(weight = value) %>%
ungroup()
head(edge.data)
edges <- edge.data %>%
left_join(nodes, by = c("Source" = "label")) %>%
dplyr::rename(from = id) %>%
left_join(nodes, by = c("Target" = "label")) %>%
dplyr::rename(to = id) %>%
select(from, to, weight)
edges
edges$weight.grp <- cut(edges$weight, c(-1,50,100,150),
labels=c("0-50", "51-100","l"))
# 3. Creating network objects
set.seed(100)
igraph_layouts <- c('star', 'circle', 'gem', 'dh', 'graphopt', 'grid', 'mds',
'randomly', 'fr', 'kk', 'drl', 'lgl')
color_list <- c("#FFA500", "#EE6677", "#228833", "#4477AA", "#4B0082")
g <- tbl_graph(nodes2, edges, directed = FALSE)%>%
mutate(degree = n.source)%>%
ggraph(layout = "kk") +
# geom_edge_link(aes(width = weight),
#                # edge_colour = "red",
#                position = "identity",
#                alpha = 0.8,
#                # colour = 'gray',
#                arrow = NULL) +
geom_edge_link2(aes(
width = weight),
color='gray',
alpha = 0.8)+
scale_edge_width(range = c(0.1, 2)) +
# scale_edge_colour_brewer(palette = "Set1")+
geom_node_point(aes(size = degree),color='red') +
geom_node_text(aes(#size = n.source,
label = label), repel = TRUE,
max.overlaps = getOption("ggrepel.max.overlaps", default = 100), family = "Times") +  ggtitle('Day 60')+
theme_graph(title_size = 18,
title_face = "bold",
title_margin = 10)
g
nodes2
edges
tbl_graph(nodes2, edges, directed = FALSE)%>%
mutate(degree = n.source)%>%
ggraph(layout = "kk")
nodes2
edges
n.source
tbl_graph(nodes2, edges, directed = FALSE)%>%
mutate(degree = n.source)
View(edges)
View(nodes2)
#rearrange the data frame from wide to long for the days X0:X365
df_scirehab.for.network_long <- tidyr::gather(df_scirehab.for.network, day, measurement, X0:X365, factor_key=TRUE)
#Read file
df_scirehab.for.network <- read.csv('/Volumes/jutzelec$/8_Projects/1_Ongoing/3_Drugs/masterfile/drug_names_per_day_scirehab_for_network_graph.csv', header = T, sep = ',' )
#Read file
df_scirehab.for.network <- read.csv('/Volumes/jutzelec$/8_Projects/1_Ongoing/3_Drugs/masterfile/drug_names_per_day_scirehab_for_network_graph.csv', header = T, sep = ',' )
head(df_scirehab.for.network)
#Read file
df_scirehab.for.network <- read.csv('/Volumes/jutzelec$/8_Projects/1_Ongoing/3_Drugs/masterfile/drug_names_per_day_scirehab_for_network_graph.csv', header = T, sep = ',' )
#Read file
df_scirehab.for.network <- read.csv('/Volumes/jutzelec$/8_Projects/1_Ongoing/3_Drugs/masterfile/drug_names_per_day_scirehab_for_network_graph.csv', header = T, sep = ',' )
#load original scirehab medication dataset
scirehab.medication.data <- read.csv("/Volumes/jutzelec$/8_Projects/1_Ongoing/3_Drugs/drug_addep/masterfile/masterfile.csv", header = T, sep = ',')
names(scirehab.medication.data)
#Make copy of data file to work with
scirehab.medication.data.network <- scirehab.medication.data
#Replace all values greater than 0 with a 1 and all na's will be replaced with a 0
scirehab.medication.data.network.2<-scirehab.medication.data.network %>%
dplyr::mutate_if(is.numeric, ~1 * (. != 0)) %>%
dplyr::mutate_if(is.numeric, ~replace_na(., 0))
#Create the vector generic_name
generic_name <- unique(scirehab.medication.data.network.2$generic_name)
#Create template for final data frame
df_total.scirehab = data.frame()
#Create loop: For each of the generic names, create a subset and then replace the 1's with the generic drug name.
for (i in 1:length(generic_name)){
temp <- scirehab.medication.data.network.2[scirehab.medication.data.network.2$generic_name==generic_name[i],]
generic_name2<-as.character(unique(temp$generic_name))
temp[temp==1] <- generic_name2
temp[temp==0] <- ''
df <- temp
df_total.scirehab <- rbind(df_total.scirehab,df)
}
#load original scirehab medication dataset
scirehab.medication.data <- read.csv("/Volumes/jutzelec$/8_Projects/1_Ongoing/3_Drugs/drug_addep/masterfile/masterfile.csv", header = T, sep = ',')
names(scirehab.medication.data)
#Make copy of data file to work with
scirehab.medication.data.network <- scirehab.medication.data
#Replace all values greater than 0 with a 1 and all na's will be replaced with a 0
scirehab.medication.data.network.2<-scirehab.medication.data.network %>%
dplyr::mutate_if(is.numeric, ~1 * (. != 0)) %>%
dplyr::mutate_if(is.numeric, ~replace_na(., 0))
#Create the vector generic_name
generic_name <- unique(scirehab.medication.data.network.2$generic_name)
#Create template for final data frame
df_total.scirehab = data.frame()
scirehab.medication.data.network.2
#Create template for final data frame
df_total.scirehab = data.frame()
#Create loop: For each of the generic names, create a subset and then replace the 1's with the generic drug name.
for (i in 1:length(generic_name)){
temp <- scirehab.medication.data.network.2[scirehab.medication.data.network.2$generic_name==generic_name[i],]
generic_name2<-as.character(unique(temp$generic_name))
temp[temp==1] <- generic_name
temp[temp==0] <- ''
df <- temp
df_total.scirehab <- rbind(df_total.scirehab,df)
}
scirehab.medication.data.network.2
#Create the vector generic_name
generic_name <- unique(scirehab.medication.data.network.2$generic_name)
#Create template for final data frame
df_total.scirehab = data.frame()
#Create loop: For each of the generic names, create a subset and then replace the 1's with the generic drug name.
for (i in 1:length(generic_name)){
temp <- scirehab.medication.data.network.2[scirehab.medication.data.network.2$generic_name==generic_name[i],]
generic_name2<-as.character(unique(temp$generic_name))
temp[temp==1] <- generic_name2
temp[temp==0] <- ''
df <- temp
df_total.scirehab <- rbind(df_total.scirehab,df)
}
df_all_days_pooled.scirehab
for (i in 1:length(days)){
temp <- df_scirehab.for.network_long_subset_rm_na.unique.values[df_scirehab.for.network_long_subset_rm_na.unique.values$day==days[i],]
day_added <-as.character(unique(temp$day))
df <- temp %>% mutate(n = 1) %>%
spread(measurement, n, fill=0) %>%
select(-NEW_ID, -day) %>%
{crossprod(as.matrix(.))} %>%
replace(lower.tri(., diag=T), NA) %>%
reshape2::melt(na.rm=T) %>%
unite('Pair', c('Var1', 'Var2'), sep=", ")
df$day <- day_added
df_all_days_pooled.scirehab <- rbind(df_all_days_pooled.scirehab,df)
}
for (i in 1:length(days)){
temp <- df_scirehab.for.network_long_subset_rm_na.unique.values[df_scirehab.for.network_long_subset_rm_na.unique.values$day==days[i],]
day_added <-as.character(unique(temp$day))
df <- temp %>% mutate(n = 1) %>%
spread(measurement, n, fill=0) %>%
select(-NEW_ID, -day) %>%
{crossprod(as.matrix(.))} %>%
replace(lower.tri(., diag=T), NA) %>%
reshape2::melt(na.rm=T) %>%
unite('Pair', c('Var1', 'Var2'), sep=", ")
df$day <- day_added
df_all_days_pooled.scirehab <- rbind(df_all_days_pooled.scirehab,df)
}
# Create the vector generic_name
days <- unique(df_scirehab.for.network_long_subset_rm_na.unique.values$day)
#Create the vector generic_name
generic_name <- unique(scirehab.medication.data.network.2$generic_name)
#Create template for final data frame
df_total.scirehab = data.frame()
df_total.scirehab
scirehab.medication.data.network.2
# Lod original data
sygen.medication.data <- read.csv("/Volumes/jutzelec$/8_Projects/1_Ongoing/3_Drugs/masterfile/df_drugs_indication_per_day.csv", header = T, sep = ',')
sygen.medication.data
# Replace all values greater than 0 with a 1 and all na's will be replaced with a 0
sygen.medication.data.network<-sygen.medication.data.network.copy %>%
dplyr::mutate_if(is.numeric, ~1 * (. != 0)) %>%
dplyr::mutate_if(is.numeric, ~replace_na(., 0))
# Make copy of data file to work with
sygen.medication.data.network.copy <- sygen.medication.data
# Replace all values greater than 0 with a 1 and all na's will be replaced with a 0
sygen.medication.data.network<-sygen.medication.data.network.copy %>%
dplyr::mutate_if(is.numeric, ~1 * (. != 0)) %>%
dplyr::mutate_if(is.numeric, ~replace_na(., 0))
sygen.medication.data.network
#Create the vector generic_name
generic_name <- unique(sygen.medication.data.network$generic_name)
#Create template for final data frame
df_total = data.frame()
#Replace all values greater than 0 with a 1 and all na's will be replaced with a 0
scirehab.medication.data.network.2<-scirehab.medication.data.network %>%
dplyr::mutate_if(is.numeric, ~1 * (. != 0)) %>%
dplyr::mutate_if(is.numeric, ~replace_na(., 0))
#Create the vector generic_name
generic_name <- unique(scirehab.medication.data.network.2$generic_name)
#Create template for final data frame
df_total.scirehab = data.frame()
#Create loop: For each of the generic names, create a subset and then replace the 1's with the generic drug name.
for (i in 1:length(generic_name)){
temp <- scirehab.medication.data.network.2[scirehab.medication.data.network.2$generic_name==generic_name[i],]
generic_name2<-as.character(unique(temp$generic_name))
temp[temp==1] <- generic_name2
temp[temp==0] <- ''
df <- temp
df_total.scirehab <- rbind(df_total.scirehab,df)
}
df_total.scirehab
#Read file
df_scirehab.for.network <- read.csv('/Volumes/jutzelec$/8_Projects/1_Ongoing/3_Drugs/masterfile/drug_names_per_day_scirehab_for_network_graph.csv', header = T, sep = ',' )
write.csv(df_total.scirehab, '/Volumes/jutzelec$/8_Projects/1_Ongoing/3_Drugs/masterfile/drug_names_per_day_scirehab_for_network_graph.csv')
write.csv(df_total.scirehab, '/Volumes/jutzelec$/8_Projects/1_Ongoing/3_Drugs/masterfile/drug_names_per_day_scirehab_for_network_graph.csv')
#rearrange the data frame from wide to long for the days X0:X365
df_scirehab.for.network_long <- tidyr::gather(df_scirehab.for.network, day, measurement, X0:X365, factor_key=TRUE)
#Read file
df_scirehab.for.network <- read.csv('/Volumes/jutzelec$/8_Projects/1_Ongoing/3_Drugs/masterfile/drug_names_per_day_scirehab_for_network_graph.csv', header = T, sep = ',' )
df_scirehab.for.network_long <- tidyr::gather(df_scirehab.for.network, day, measurement, X0:X365, factor_key=TRUE)
tibble::glimpse(df_scirehab.for.network_long)
head(df_scirehab.for.network_long)
# Subset data
df_scirehab.for.network_long_subset =df_scirehab.for.network_long[,-c(1, 3:4)]
# Remove lines that have no value in the measurement column
df_scirehab.for.network_long_subset_rm_na <- subset(df_scirehab.for.network_long_subset, (!(measurement == '')) )
df_scirehab.for.network_long_subset_rm_na.unique.values <- df_scirehab.for.network_long_subset_rm_na %>% distinct()
# Create the vector generic_name
days <- unique(df_scirehab.for.network_long_subset_rm_na.unique.values$day)
# Create template for final data frame
df_all_days_pooled.scirehab = data.frame()
for (i in 1:length(days)){
temp <- df_scirehab.for.network_long_subset_rm_na.unique.values[df_scirehab.for.network_long_subset_rm_na.unique.values$day==days[i],]
day_added <-as.character(unique(temp$day))
df <- temp %>% mutate(n = 1) %>%
spread(measurement, n, fill=0) %>%
select(-NEW_ID, -day) %>%
{crossprod(as.matrix(.))} %>%
replace(lower.tri(., diag=T), NA) %>%
reshape2::melt(na.rm=T) %>%
unite('Pair', c('Var1', 'Var2'), sep=", ")
df$day <- day_added
df_all_days_pooled.scirehab <- rbind(df_all_days_pooled.scirehab,df)
}
df_all_days_pooled_scirehab.final <- subset(df_all_days_pooled.scirehab, value>0)
df_scirehab.for.network_long_subset_rm_na.unique.values
for (i in 1:length(days)){
temp <- df_scirehab.for.network_long_subset_rm_na.unique.values[df_scirehab.for.network_long_subset_rm_na.unique.values$day==days[i],]
day_added <-as.character(unique(temp$day))
df <- temp %>% mutate(n = 1) %>%
spread(measurement, n, fill=0) %>%
select(-newid, -day) %>%
{crossprod(as.matrix(.))} %>%
replace(lower.tri(., diag=T), NA) %>%
reshape2::melt(na.rm=T) %>%
unite('Pair', c('Var1', 'Var2'), sep=", ")
df$day <- day_added
df_all_days_pooled.scirehab <- rbind(df_all_days_pooled.scirehab,df)
}
df_scirehab.for.network_long
# Subset data
df_scirehab.for.network_long_subset =df_scirehab.for.network_long[,-c(1)]
# Remove lines that have no value in the measurement column
df_scirehab.for.network_long_subset_rm_na <- subset(df_scirehab.for.network_long_subset, (!(measurement == '')) )
df_scirehab.for.network_long_subset_rm_na.unique.values <- df_scirehab.for.network_long_subset_rm_na %>% distinct()
# Create the vector generic_name
days <- unique(df_scirehab.for.network_long_subset_rm_na.unique.values$day)
# Create template for final data frame
df_all_days_pooled.scirehab = data.frame()
for (i in 1:length(days)){
temp <- df_scirehab.for.network_long_subset_rm_na.unique.values[df_scirehab.for.network_long_subset_rm_na.unique.values$day==days[i],]
day_added <-as.character(unique(temp$day))
df <- temp %>% mutate(n = 1) %>%
spread(measurement, n, fill=0) %>%
select(-newid, -day) %>%
{crossprod(as.matrix(.))} %>%
replace(lower.tri(., diag=T), NA) %>%
reshape2::melt(na.rm=T) %>%
unite('Pair', c('Var1', 'Var2'), sep=", ")
df$day <- day_added
df_all_days_pooled.scirehab <- rbind(df_all_days_pooled.scirehab,df)
}
df_scirehab.for.network_long_subset_rm_na.unique.values
df_scirehab.for.network_long_subset_rm_na.unique.values
df_scirehab.for.network_long_subset_rm_na
df_scirehab.for.network_long_subset_rm_na
df_scirehab.for.network_long
df_scirehab.for.network_long_subset
# Remove lines that have no value in the measurement column
df_scirehab.for.network_long_subset_rm_na <- subset(df_scirehab.for.network_long_subset, (!(measurement == '')) )
df_scirehab.for.network_long_subset_rm_na
df_scirehab.for.network
df_scirehab.for.network_long
# Subset data
df_scirehab.for.network_long_subset =df_scirehab.for.network_long[,-c(1,3)]
# Remove lines that have no value in the measurement column
df_scirehab.for.network_long_subset_rm_na <- subset(df_scirehab.for.network_long_subset, (!(measurement == '')) )
df_scirehab.for.network_long_subset_rm_na.unique.values <- df_scirehab.for.network_long_subset_rm_na %>% distinct()
df_scirehab.for.network_long_subset
# Remove lines that have no value in the measurement column
df_scirehab.for.network_long_subset_rm_na <- subset(df_scirehab.for.network_long_subset, (!(measurement == '')) )
df_scirehab.for.network_long_subset_rm_na
df_scirehab.for.network_long_subset_rm_na.unique.values <- df_scirehab.for.network_long_subset_rm_na %>% distinct()
# Create the vector generic_name
days <- unique(df_scirehab.for.network_long_subset_rm_na.unique.values$day)
# Create template for final data frame
df_all_days_pooled.scirehab = data.frame()
for (i in 1:length(days)){
temp <- df_scirehab.for.network_long_subset_rm_na.unique.values[df_scirehab.for.network_long_subset_rm_na.unique.values$day==days[i],]
day_added <-as.character(unique(temp$day))
df <- temp %>% mutate(n = 1) %>%
spread(measurement, n, fill=0) %>%
select(-newid, -day) %>%
{crossprod(as.matrix(.))} %>%
replace(lower.tri(., diag=T), NA) %>%
reshape2::melt(na.rm=T) %>%
unite('Pair', c('Var1', 'Var2'), sep=", ")
df$day <- day_added
df_all_days_pooled.scirehab <- rbind(df_all_days_pooled.scirehab,df)
}
df_all_days_pooled.scirehab
df_all_days_pooled_scirehab.final <- subset(df_all_days_pooled.scirehab, value>0)
# Write file
write.csv(df_all_days_pooled_final, '/Volumes/jutzelec$/8_Projects/1_Ongoing/3_Drugs/Network_graph/edges_for_graph.scirehab.csv', row.names = F)
# Write file
write.csv(df_all_days_pooled_final, '/Volumes/jutzelec$/8_Projects/1_Ongoing/3_Drugs/Network_graph/edges_for_graph.scirehab.csv', row.names = F)
# Write file
write.csv(edge_df, '/Volumes/jutzelec$/8_Projects/1_Ongoing/3_Drugs/Network_graph/edges_for_graph.scirehab.csv', row.names = F)
# Create the dataframe for the edges --> separate the pairs
edge_df<-df_all_days_pooled_final %>% separate(Pair, c("Source", "Target"), ", ")
# Create the dataframe for the edges --> separate the pairs
edge_df<-df_all_days_pooled_scirehab.final %>% separate(Pair, c("Source", "Target"), ", ")
edge_df
# Write file
write.csv(edge_df, '/Volumes/jutzelec$/8_Projects/1_Ongoing/3_Drugs/Network_graph/edges_for_graph.scirehab.csv', row.names = F)
##
## ---------------------------
##
## Set output directorypaths
outdir_figures='/Users/jutzca/Documents/Github/Acute-Pharmacological-Treatment-in-SCI/Figures/SCI_Rehab'
outdir_tables='/Users/jutzca/Documents/Github/Acute-Pharmacological-Treatment-in-SCI/Tables/SCI_Rehab'
network_data<-read.csv("/Volumes/jutzelec$/8_Projects/1_Ongoing/3_Drugs/Network_graph/edges_for_graph.scirehab.csv", header = T, sep = ',')
information.on.medication
information.on.medication <- read.csv("/Volumes/jutzelec$/8_Projects/1_Ongoing/3_Drugs/masterfile/df_drugs_indication_per_day.csv")
information.on.medication
#load original scirehab medication dataset
scirehab.medication.data <- read.csv("/Volumes/jutzelec$/8_Projects/1_Ongoing/3_Drugs/drug_addep/masterfile/masterfile.csv", header = T, sep = ',')
scirehab.medication.data
#Make copy of data file to work with
scirehab.medication.data.copy <- scirehab.medication.data
#Replace all values greater than 0 with a 1 and all na's will be replaced with a 0
scirehab.medication.data.2<-scirehab.medication.data.copy %>%
dplyr::mutate_if(is.numeric, ~1 * (. != 0)) %>%
dplyr::mutate_if(is.numeric, ~replace_na(., 0))
information.on.medication.long2.extended
network_data<-read.csv("/Volumes/jutzelec$/8_Projects/1_Ongoing/3_Drugs/Network_graph/edges_for_graph.sygen.csv", header = T, sep = ',')
information.on.medication <- read.csv("/Volumes/jutzelec$/8_Projects/1_Ongoing/3_Drugs/masterfile/df_drugs_indication_per_day.csv")
# Format file from wide to long
information.on.medication.long <- gather(information.on.medication, day, dose, X0:X365, factor_key=TRUE)
information.on.medication.long
# Replace all values greater than 0 with a 1 and all na's will be replaced with a 0
information.on.medication.long2<-information.on.medication.long %>%
dplyr::mutate_if(is.numeric, ~1 * (. != 0)) %>%
dplyr::mutate_if(is.numeric, ~replace_na(., 0))
# Add demographics and injury characteristics
demographics.data <- read.csv("/Volumes/jutzelec$/8_Projects/1_Ongoing/3_Drugs/masterfile/demographics_injury_characteristics2.csv", header=T, sep = ',')
information.on.medication.long2.extended <- merge(information.on.medication.long2,demographics.data, by="NEW_ID")
# Format file from wide to long
scirehab.information.on.medication.long <- gather(scirehab.medication.data.copy, day, dose, X0:X365, factor_key=TRUE)
scirehab.information.on.medication.long
#Replace all values greater than 0 with a 1 and all na's will be replaced with a 0
scirehab.medication.data.2.long<-scirehab.information.on.medication.long %>%
dplyr::mutate_if(is.numeric, ~1 * (. != 0)) %>%
dplyr::mutate_if(is.numeric, ~replace_na(., 0))
scirehab.information.on.medication.long
#Replace all values greater than 0 with a 1 and all na's will be replaced with a 0
scirehab.medication.data.2.long<-scirehab.information.on.medication.long %>%
dplyr::mutate_if(is.numeric, ~1 * (. != 0)) %>%
dplyr::mutate_if(is.numeric, ~replace_na(., 0))
scirehab.information.on.medication.longdose
dplyr::drop_na(dose)
tidyr::drop_na(dose)
tidyr::drop_na("dose")
#Replace all values greater than 0 with a 1 and all na's will be replaced with a 0
scirehab.medication.data.2.long<-scirehab.information.on.medication.long%>%
tidyr::drop_na("dose")
#Replace all values greater than 0 with a 1 and all na's will be replaced with a 0
scirehab.medication.data.2.long<-scirehab.information.on.medication.long%>%
tidyr::drop_na("dose")
scirehab.medication.data.copy.subset <-subset(scirehab.medication.data.copy, dose== !(is.na))
scirehab.medication.data.copy.subset
#Make copy of data file to work with
scirehab.medication.data.copy <- scirehab.medication.data
scirehab.medication.data.copy
names(scirehab.medication.data.copy)
scirehab.medication.data.copy.subset <-scirehab.medication.data.copy[, c(1:63)]
scirehab.medication.data.copy.subset
# Format file from wide to long
scirehab.information.on.medication.long <- gather(scirehab.medication.data.copy, day, dose, X0:X360, factor_key=TRUE)
scirehab.information.on.medication.long
# Format file from wide to long
scirehab.information.on.medication.long <- gather(scirehab.medication.data.copy.subset, day, dose, X0:X60, factor_key=TRUE)
